generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  AGENT
  CASHIER
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum PaymentMethod {
  CASH
  CARD
  EWALLET
  BANK
}

enum QuoteStatus {
  DRAFT
  SENT
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PARTIALLY_PAID
  PAID
  VOID
}

enum CreditNoteStatus {
  ISSUED
  VOID
}

enum EinvoiceSubmissionStatus {
  PENDING
  SENT
  ACCEPTED
  REJECTED
  FAILED
}

enum EinvoiceProvider {
  MOCK
  MYINVOIS
  PEPPOL
}

enum WaMessageDirection {
  INBOUND
  OUTBOUND
}

enum WaSessionStatus {
  ACTIVE
  PAUSED
  DISCONNECTED
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  passwordHash  String
  fullName      String
  role          Role        @default(AGENT)
  isActive      Boolean     @default(true)
  totpSecret    String?
  totpEnabled   Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  ticketsAssigned Ticket[]  @relation("TicketAssignee")
  auditLogs     AuditLog[]  @relation("AuditActor")

  @@map("users")
}

model Branch {
  id                String       @id @default(cuid())
  code              String       @unique
  name              String
  timezone          String       @default("Asia/Kuala_Lumpur")
  operatingHours    Json?
  selfSignupEnabled Boolean      @default(false)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  products          Product[]
  sales             Sale[]
  waSessions        WaSession[]
  quotes            Quote[]
  invoices          Invoice[]
  creditNotes       CreditNote[]

  @@map("branches")
}

model Customer {
  id             String            @id @default(cuid())
  fullName       String
  phone          String            @unique
  email          String?
  tags           String[]          @default([])
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  tickets        Ticket[]
  sales          Sale[]
  interactions   CrmInteraction[]
  formSubmissions FormSubmission[]
  quotes         Quote[]
  invoices       Invoice[]

  @@index([phone])
  @@map("customers")
}

model Product {
  id         String    @id @default(cuid())
  branchId   String
  branch     Branch    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  name       String
  sku        String
  priceCents Int
  stockQty   Int       @default(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  saleItems  SaleItem[]
  quoteItems QuoteItem[]
  invoiceItems InvoiceItem[]
  creditNoteItems CreditNoteItem[]

  @@unique([branchId, sku])
  @@index([branchId, name])
  @@map("products")
}

model Sale {
  id             String        @id @default(cuid())
  branchId       String
  branch         Branch        @relation(fields: [branchId], references: [id], onDelete: Restrict)
  customerId     String?
  customer       Customer?     @relation(fields: [customerId], references: [id])
  paymentMethod  PaymentMethod
  subtotalCents  Int
  discountCents  Int           @default(0)
  taxCents       Int
  totalCents     Int
  receiptNo      String        @unique
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  items          SaleItem[]
  auditLogs      AuditLog[]
  invoices       Invoice[]

  @@index([branchId, createdAt(sort: Desc)])
  @@map("sales")
}

model SaleItem {
  id            String   @id @default(cuid())
  saleId        String
  sale          Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId     String
  product       Product  @relation(fields: [productId], references: [id])
  quantity      Int
  unitPrice     Int
  discountCents Int      @default(0)
  totalCents    Int
  createdAt     DateTime @default(now())

  @@map("sale_items")
}

model Quote {
  id               String          @id @default(cuid())
  quoteNo          String
  branchId         String
  branch           Branch          @relation(fields: [branchId], references: [id], onDelete: Restrict)
  customerId       String?
  customer         Customer?       @relation(fields: [customerId], references: [id])
  itemsTotal       Decimal         @db.Decimal(12, 2)
  discountTotal    Decimal         @db.Decimal(12, 2) @default("0")
  taxableSubtotal  Decimal         @db.Decimal(12, 2)
  sst              Decimal         @db.Decimal(12, 2)
  grandTotal       Decimal         @db.Decimal(12, 2)
  currency         String          @default("MYR")
  status           QuoteStatus     @default(DRAFT)
  validUntil       DateTime?
  notes            String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  items            QuoteItem[]
  invoices         Invoice[]

  @@unique([branchId, quoteNo])
  @@index([customerId, status])
  @@map("quotes")
}

model QuoteItem {
  id           String   @id @default(cuid())
  quoteId      String
  quote        Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  productId    String?
  product      Product? @relation(fields: [productId], references: [id])
  description  String
  qty          Decimal  @db.Decimal(12, 2)
  unitPrice    Decimal  @db.Decimal(12, 2)
  lineDiscount Decimal  @db.Decimal(12, 2) @default("0")
  lineTotal    Decimal  @db.Decimal(12, 2)
  taxCode      String?

  @@map("quote_items")
}

model Invoice {
  id               String                @id @default(cuid())
  invoiceNo        String
  branchId         String
  branch           Branch                @relation(fields: [branchId], references: [id], onDelete: Restrict)
  customerId       String?
  customer         Customer?             @relation(fields: [customerId], references: [id])
  quoteId          String?
  quote            Quote?                @relation(fields: [quoteId], references: [id])
  issueDate        DateTime
  dueDate          DateTime?
  itemsTotal       Decimal               @db.Decimal(12, 2)
  discountTotal    Decimal               @db.Decimal(12, 2) @default("0")
  taxableSubtotal  Decimal               @db.Decimal(12, 2)
  sst              Decimal               @db.Decimal(12, 2)
  grandTotal       Decimal               @db.Decimal(12, 2)
  paidTotal        Decimal               @db.Decimal(12, 2) @default("0")
  balanceDue       Decimal               @db.Decimal(12, 2)
  currency         String                @default("MYR")
  status           InvoiceStatus         @default(DRAFT)
  posSaleId        String?
  posSale          Sale?                 @relation(fields: [posSaleId], references: [id])
  notes            String?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  items            InvoiceItem[]
  payments         InvoicePayment[]
  creditNotes      CreditNote[]
  einvoiceSubmissions EinvoiceSubmission[]

  @@unique([branchId, invoiceNo])
  @@index([customerId, status])
  @@map("invoices")
}

model InvoiceItem {
  id           String   @id @default(cuid())
  invoiceId    String
  invoice      Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  productId    String?
  product      Product? @relation(fields: [productId], references: [id])
  description  String
  qty          Decimal  @db.Decimal(12, 2)
  unitPrice    Decimal  @db.Decimal(12, 2)
  lineDiscount Decimal  @db.Decimal(12, 2) @default("0")
  lineTotal    Decimal  @db.Decimal(12, 2)
  taxCode      String?
  creditNoteItems CreditNoteItem[]

  @@map("invoice_items")
}

model InvoicePayment {
  id        String         @id @default(cuid())
  invoiceId String
  invoice   Invoice        @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  method    PaymentMethod
  amount    Decimal        @db.Decimal(12, 2)
  reference String?
  paidAt    DateTime       @default(now())

  @@map("invoice_payments")
}

model CreditNote {
  id              String            @id @default(cuid())
  creditNoteNo    String
  branchId        String
  branch          Branch            @relation(fields: [branchId], references: [id], onDelete: Restrict)
  invoiceId       String
  invoice         Invoice           @relation(fields: [invoiceId], references: [id])
  reason          String
  itemsTotal      Decimal           @db.Decimal(12, 2)
  discountTotal   Decimal           @db.Decimal(12, 2) @default("0")
  taxableSubtotal Decimal           @db.Decimal(12, 2)
  sst             Decimal           @db.Decimal(12, 2)
  grandTotal      Decimal           @db.Decimal(12, 2)
  currency        String            @default("MYR")
  status          CreditNoteStatus  @default(ISSUED)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  items           CreditNoteItem[]

  @@unique([branchId, creditNoteNo])
  @@map("credit_notes")
}

model CreditNoteItem {
  id             String        @id @default(cuid())
  creditNoteId   String
  creditNote     CreditNote    @relation(fields: [creditNoteId], references: [id], onDelete: Cascade)
  invoiceItemId  String?
  invoiceItem    InvoiceItem?  @relation(fields: [invoiceItemId], references: [id])
  description    String
  qty            Decimal       @db.Decimal(12, 2)
  unitPrice      Decimal       @db.Decimal(12, 2)
  lineDiscount   Decimal       @db.Decimal(12, 2) @default("0")
  lineTotal      Decimal       @db.Decimal(12, 2)
  taxCode        String?
  productId      String?
  product        Product?      @relation(fields: [productId], references: [id])

  @@map("credit_note_items")
}

model EinvoiceSubmission {
  id            String                    @id @default(cuid())
  invoiceId     String
  invoice       Invoice                   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  provider      EinvoiceProvider          @default(MOCK)
  payload       Json
  submissionId  String?
  status        EinvoiceSubmissionStatus  @default(PENDING)
  lastError     String?
  attempts      Int                       @default(0)
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  lastPolledAt  DateTime?
  timeoutAt     DateTime?

  @@index([invoiceId])
  @@map("einvoice_submissions")
}

model Ticket {
  id            String            @id @default(cuid())
  customerId    String?
  customer      Customer?         @relation(fields: [customerId], references: [id])
  waSessionId   String?
  waSession     WaSession?        @relation(fields: [waSessionId], references: [id])
  subject       String
  description   String
  status        TicketStatus      @default(OPEN)
  priority      Int               @default(3)
  assigneeId    String?
  assignee      User?             @relation("TicketAssignee", fields: [assigneeId], references: [id])
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  interactions  CrmInteraction[]
  aiSuggestions AiSuggestion[]
  auditLogs     AuditLog[]        @relation("TicketAudit")

  @@index([customerId, status])
  @@index([status, createdAt(sort: Desc)])
  @@map("tickets")
}

model WaSession {
  id              String          @id @default(cuid())
  branchId        String?
  branch          Branch?         @relation(fields: [branchId], references: [id])
  label           String
  status          WaSessionStatus @default(ACTIVE)
  lastConnectedAt DateTime?
  isPaused        Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  messages        WaMessage[]
  tickets         Ticket[]

  @@map("wa_sessions")
}

model WaMessage {
  id        String              @id @default(cuid())
  sessionId String
  session   WaSession           @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  direction WaMessageDirection
  payload   Json
  createdAt DateTime            @default(now())

  @@index([sessionId, createdAt(sort: Desc)])
  @@map("wa_messages")
}

model CrmInteraction {
  id          String     @id @default(cuid())
  customerId  String?
  customer    Customer?  @relation(fields: [customerId], references: [id])
  ticketId    String?
  ticket      Ticket?    @relation(fields: [ticketId], references: [id])
  channel     String
  summary     String?
  payload     Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  suggestions AiSuggestion[]

  @@map("crm_interactions")
}

model Form {
  id          String            @id @default(cuid())
  title       String
  description String?
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  submissions FormSubmission[]

  @@map("forms")
}

model FormSubmission {
  id          String     @id @default(cuid())
  formId      String
  form        Form       @relation(fields: [formId], references: [id], onDelete: Cascade)
  customerId  String?
  customer    Customer?  @relation(fields: [customerId], references: [id])
  payload     Json
  submittedAt DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("form_submissions")
}

model AiSuggestion {
  id             String           @id @default(cuid())
  ticketId       String?
  ticket         Ticket?          @relation(fields: [ticketId], references: [id])
  interactionId  String?
  interaction    CrmInteraction?  @relation(fields: [interactionId], references: [id])
  suggestion     String
  confidence     Float?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@map("ai_suggestions")
}

model AuditLog {
  id        String   @id @default(cuid())
  actorId   String?
  actor     User?    @relation("AuditActor", fields: [actorId], references: [id])
  ticketId  String?
  ticket    Ticket?  @relation("TicketAudit", fields: [ticketId], references: [id])
  saleId    String?
  sale      Sale?    @relation(fields: [saleId], references: [id])
  action    String
  details   Json?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}
